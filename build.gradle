apply plugin: 'java'
apply plugin: 'jetty'
apply plugin: 'war'
apply plugin: 'idea'

import org.apache.tools.ant.filters.*


repositories {
    mavenCentral()
}

dependencies {
    compile 'org.mybatis:mybatis:3.1.1',
            'org.mybatis:mybatis-spring:1.1.1',
            'javax.servlet:servlet-api:2.5',
            'org.springframework:spring-core:3.1.1.RELEASE',
            'org.springframework:spring-webmvc:3.1.1.RELEASE',
            'org.springframework:spring-web:3.1.1.RELEASE',
            'commons-dbcp:commons-dbcp:1.4',
            'org.springframework:spring-orm:3.1.0.RELEASE',
            'com.h2database:h2:1.3.167',
            'org.freemarker:freemarker:2.3.19',
            'ch.qos.logback:logback-classic:1.0.0',
            'commons-lang:commons-lang:2.6',
            'org.hsqldb:hsqldb:2.2.8',
            'org.jasig.cas:cas-client-core:3.1.3',
            'org.jasig.cas.client:cas-client-integration-atlassian:3.1.11',
            'commons-codec:commons-codec:1.6',
            'commons-logging:commons-logging:1.1',
            'log4j:log4j:1.2.5',
            'org.opensaml:opensaml:1.1',
            'org.springframework.security:spring-security-acl:2.0.4',
            'xml-security:xmlsec:1.3.0',
            'joda-time:joda-time:2.1',
            'javax.mail:mail:1.4.5'

    testCompile 'junit:junit:4.10',
            'org.springframework:spring-test:3.1.1.RELEASE',
            'org.mockito:mockito-all:1.9.0',
            'org.testng:testng:6.1.1',
            'org.seleniumhq.selenium:selenium-java:2.23.0',
            'org.seleniumhq.selenium:selenium-firefox-driver:2.23.0'
}


task generateTemplateFilesDEV(type: Copy) {
    Properties props = new Properties()
    props.load(new FileInputStream("$projectDir/properties/" + "DEV" + ".properties"))

    from "$projectDir/template"
    include "*.xml"
    into "$projectDir/src/main/webapp/WEB-INF"
    filter(ReplaceTokens, tokens: props)
}

task generateTemplateFilesQA(type: Copy) {
    Properties props = new Properties()
    props.load(new FileInputStream("$projectDir/properties/" + "QA" + ".properties"))

    from "$projectDir/template"
    include "*.xml"
    into "$projectDir/src/main/webapp/WEB-INF"
    filter(ReplaceTokens, tokens: props)
}


task generateTemplateFilesCI(type: Copy) {
    Properties props = new Properties()
    props.load(new FileInputStream("$projectDir/properties/" + "CI" + ".properties"))

    from "$projectDir/template"
    include "*.xml"
    into "$projectDir/src/main/webapp/WEB-INF"
    filter(ReplaceTokens, tokens: props)
}

task generateTemplateFilesProduction(type: Copy) {
    Properties props = new Properties()
    props.load(new FileInputStream("$projectDir/properties/" + "PRODUCTION" + ".properties"))

    from "$projectDir/template"
    include "*.xml"
    into "$projectDir/src/main/webapp/WEB-INF"
    filter(ReplaceTokens, tokens: props)
}


jettyRun{
    httpPort = 9091
    contextPath = ''
}

jettyRunWar{
    httpPort = 8080
    contextPath = ''
}

task jettyRunDev(dependsOn: [generateTemplateFilesDEV, jettyRun])

test {
    exclude '**/functional/com/thoughtworks/**/*.*'
}

task functionalTest(type: Test, dependsOn: [test, generateTemplateFilesCI]) {
    include '**/functional/com/thoughtworks/**'
    useTestNG()
    options.suites("src/test/java/functional/com/thoughtworks/twu/resources/testng.xml")

}

functionalTest.doFirst {
    jettyRun.daemon = true
    jettyRun.httpPort = 9191
    jettyRun.execute()
}

[jettyRunWar, jettyStop]*.stopPort = 9291
[jettyRunWar, jettyStop]*.stopKey = 'stopKey'

functionalTest.doLast {
    jettyStop.execute()
}


task warQA(type: War, dependsOn: generateTemplateFilesQA) {
    archiveName = 'feedforward-QA.war'
}

task warCI(type: War, dependsOn: generateTemplateFilesCI) {
    archiveName = 'feedforward-CI.war'
}

task warProduction(type: War, dependsOn: generateTemplateFilesProduction) {
    archiveName = 'feedforward.war'
}


